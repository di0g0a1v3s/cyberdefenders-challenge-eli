vendor               | coreboot
version              | Google_Glimmer.5216.198.188
release_date         | 05/27/2018
size                 | 8192 KB
ro bios version      | Google_Glimmer.5216.198.11
Boot switch status:
  Recovery button: released
  Developer mode:  not enabled
  RO firmware:     protected
Boot reason (0): normal
Boot firmware: A
Active EC code: RW
Raw log:
arch                    = x86                            # [RO/str] Platform architecture
backup_nvram_request    = 1                              # [RW/int] Backup the nvram somewhere at the next boot. Cleared on success.
battery_cutoff_request  = 0                              # [RW/int] Cut off battery and shutdown on next boot
block_devmode           = 0                              # [RW/int] Block all use of developer mode
clear_tpm_owner_done    = 1                              # [RW/int] Clear TPM owner done
clear_tpm_owner_request = 0                              # [RW/int] Clear TPM owner on next boot
cros_debug              = 0                              # [RO/int] OS should allow debug features
dbg_reset               = 0                              # [RW/int] Debug reset mode request
debug_build             = 0                              # [RO/int] OS image built for debug features
dev_boot_legacy         = 0                              # [RW/int] Enable developer mode boot Legacy OSes
dev_boot_signed_only    = 0                              # [RW/int] Enable developer mode boot only from official kernels
dev_boot_usb            = 0                              # [RW/int] Enable developer mode boot from USB/SD
dev_default_boot        = disk                           # [RW/str] Default boot from disk, legacy or usb
dev_enable_udc          = 0                              # [RW/int] Enable USB Device Controller
devsw_boot              = 0                              # [RO/int] Developer switch position at boot
devsw_cur               = 0                              # [RO/int] Developer switch current position
diagnostic_request      = 0                              # [RW/int] Request diagnostic rom run on next boot
disable_alt_os_request  = (error)                        # [RW/int] Disable Alt OS mode on next boot (writable)
disable_dev_request     = 0                              # [RW/int] Disable virtual dev-mode on next boot
ecfw_act                = RW                             # [RO/str] Active EC firmware
enable_alt_os_request   = (error)                        # [RW/int] Enable Alt OS mode on next boot (writable)
post_ec_sync_delay      = 0                              # [RW/int] Short delay after EC software sync (persistent, writable, eve only)
alt_os_enabled          = (error)                        # [RO/int] Alt OS state (1 if enabled, 0 if disabled)
fmap_base               = 0xffe10000                     # [RO/int] Main firmware flashmap physical address
fw_prev_result          = unknown                        # [RO/str] Firmware result of previous boot (vboot2)
fw_prev_tried           = A                              # [RO/str] Firmware tried on previous boot (vboot2)
fw_result               = unknown                        # [RW/str] Firmware result this boot (vboot2)
fw_tried                = A                              # [RO/str] Firmware tried this boot (vboot2)
fw_try_count            = 0                              # [RW/int] Number of times to try fw_try_next
fw_try_next             = A                              # [RW/str] Firmware to try next (vboot2)
fw_vboot2               = 0                              # [RO/int] 1 if firmware was selected by vboot2 or 0 otherwise
fwb_tries               = 0                              # [RW/int] Try firmware B count
fwid                    = Google_Glimmer.5216.198.188    # [RO/str] Active firmware ID
fwupdate_tries          = 0                              # [RW/int] Times to try OS firmware update (inside kern_nv)
hwid                    = GLIMMER D4A-F5Z-R2Q-A5L        # [RO/str] Hardware ID
inside_vm               = 0                              # [RO/int] Running in a VM?
kern_nv                 = 0x0000                         # [RO/int] Non-volatile field for kernel use
kernel_max_rollforward  = 0xfffffffe                     # [RW/int] Max kernel version to store into TPM
kernkey_vfy             = sig                            # [RO/str] Type of verification done on kernel key block
loc_idx                 = 0                              # [RW/int] Localization index for firmware screens
mainfw_act              = A                              # [RO/str] Active main firmware
mainfw_type             = normal                         # [RO/str] Active main firmware type
nvram_cleared           = 0                              # [RW/int] Have NV settings been lost?  Write 0 to clear
display_request         = 0                              # [RW/int] Should we initialize the display at boot?
phase_enforcement       = (error)                        # [RO/int] Board should have full security settings applied
recovery_reason         = 0                              # [RO/int] Recovery mode reason for current boot
recovery_request        = 0                              # [RW/int] Recovery mode request
recovery_subcode        = 0                              # [RW/int] Recovery reason subcode
recoverysw_boot         = 0                              # [RO/int] Recovery switch position at boot
recoverysw_cur          = (error)                        # [RO/int] Recovery switch current position
recoverysw_ec_boot      = 0                              # [RO/int] Recovery switch position at EC boot
recoverysw_is_virtual   = 0                              # [RO/int] Recovery switch is virtual
ro_fwid                 = Google_Glimmer.5216.198.11     # [RO/str] Read-only firmware ID
tpm_attack              = 0                              # [RW/int] TPM was interrupted since this flag was cleared
tpm_fwver               = 0x000a0004                     # [RO/int] Firmware version stored in TPM
tpm_kernver             = 0x00040001                     # [RO/int] Kernel version stored in TPM
tpm_rebooted            = 0                              # [RO/int] TPM requesting repeated reboot (vboot2)
tried_fwb               = 0                              # [RO/int] Tried firmware B before A this boot
try_ro_sync             = 0                              # [RO/int] try read only software sync
vdat_flags              = 0x00002c42                     # [RO/int] Flags from VbSharedData
vdat_lfdebug            = Check A result=12
Check B result=0
Firmware index booted=0x00
TPM combined version at start=0x000a0004
Lowest combined version from firmware=0x000a0004
 # [RO/str] LoadFirmware() debug data (not in print-all)
vdat_lkdebug            = Calls to LoadKernel()=1
Call 1:
  Boot flags=0x00
  Boot mode=1
  Test error=0
  Return code=0
  Debug flags=0x00
  Drive sectors=30777344
  Sector size=512
  Check result=4
  Kernel partitions found=1
  Kernel 1:
    GPT index=2
    Start sector=20480
    Sector count=32768
    Combined version=0x00040001
    Check result=19
    Debug flags=0x01
 # [RO/str] LoadKernel() debug data (not in print-all)
vdat_timers             = LFS=167019512,227421942 LF=228293648,357966444 LK=1,409320 # [RO/str] Timer values from VbSharedData
wipeout_request         = 0                              # [RW/int] Firmware requested factory reset (wipeout)
wpsw_boot               = 1                              # [RO/int] Firmware write protect hardware switch position at boot
wpsw_cur                = 1                              # [RO/int] Firmware write protect hardware switch current position
